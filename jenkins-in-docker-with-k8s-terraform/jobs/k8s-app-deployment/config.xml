<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.41">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.3"/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.20">
      <gitLabConnection/>
      <jobCredentialId/>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.plugins.libvirt.BeforeJobSnapshotJobProperty plugin="libvirt-slave@1.9.2"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>node("master"){
    stage("Clean workspace"){
        cleanWs()
    }
    stage("Install IAM Authenticator"){
        sh """
       curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
       chmod +x ./aws-iam-authenticator
       mkdir -p $HOME/bin &amp;&amp; cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator &amp;&amp; export PATH=$PATH:$HOME/bin
       echo 'export PATH=$PATH:$HOME/bin' &gt;&gt; ~/.bashrc
        """
    }
    stage("Consul Deployment") {
     sh "git clone https://github.com/hashicorp/consul-helm.git"
     sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl create ns consul &amp;&amp; helm install consul ./consul-helm --namespace consul &amp;&amp; kubectl get all -n consul"
    }
    stage("Deploy Vault") {
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl create ns vault &amp;&amp; helm repo add hashicorp https://helm.releases.hashicorp.com &amp;&amp; helm repo update &amp;&amp; helm install vault hashicorp/vault --namespace vault &amp;&amp; kubectl get all -n vault"
    }
    stage("Deploy Sonarqube") {
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube &amp;&amp; helm repo update &amp;&amp; kubectl create namespace sonarqube &amp;&amp; helm upgrade --install -n sonarqube sonarqube sonarqube/sonarqube &amp;&amp; kubectl get all -n sonarqube"
    }
    stage("Deploy Nexus") {
        sh """
           cat &lt;&lt; EOF &gt; deployment.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nexus
      namespace: nexus
    spec:
      replicas: 1
      selector:
        matchLabels:
            app: nexus-server
      template:
        metadata:
          labels:
            app: nexus-server
        spec:
          containers:
            - name: nexus
              image: sonatype/nexus3:latest
              resources:
                limits:
                  memory: "1Gi"
                  cpu: "1000m"
                requests:
                  memory: "1Gi"
                  cpu: "500m"
              ports:
                - containerPort: 8081
              volumeMounts:
                - name: nexus-data
                  mountPath: /nexus-data
          volumes:
            - name: nexus-data
              emptyDir: {}

EOF
           
           
        """
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig  &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl create namespace nexus &amp;&amp; kubectl create -f deployment.yaml &amp;&amp; kubectl get all -n nexus"
    }
    stage("Deploy Jenkins") {
        sh """
         source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl create ns jenkins &amp;&amp; helm repo add bitnami https://charts.bitnami.com/bitnami &amp;&amp; helm install jenkins bitnami/jenkins -n jenkins &amp;&amp; kubectl get all -n jenkins
        """
    }
    stage("Deploy Prometheus"){
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig  &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl create namespace monitoring &amp;&amp; helm repo add prometheus-community https://prometheus-community.github.io/helm-charts &amp;&amp; helm repo add kube-state-metrics https://kubernetes.github.io/kube-state-metrics &amp;&amp; helm repo update &amp;&amp; helm install prometheus prometheus-community/prometheus -n monitoring &amp;&amp; kubectl get all -n monitoring"
    }
    stage("Deploy Grafana") {
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig  &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; helm repo add bitnami https://charts.bitnami.com/bitnami &amp;&amp; helm install grafana bitnami/grafana -n monitoring &amp;&amp; kubectl get all -n monitoring"
    }
    stage("Deploy Jaeger"){
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl create ns jaeger &amp;&amp; helm repo add jaegertracing https://jaegertracing.github.io/helm-charts &amp;&amp; helm install jaeger jaegertracing/jaeger -n jaeger"
    }
    stage("Display All resource"){
        sh "source /var/jenkins_home/aws_credentials &amp;&amp; export KUBECONFIG=/var/jenkins_home/kubeconfig &amp;&amp; export PATH=$PATH:$HOME/bin &amp;&amp; kubectl get all --all-namespaces"
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
